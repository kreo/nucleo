/*
 |--------------------------------------------------------------------------
 | Nucleo - ACSS+BEM Agnostic Framework
 |--------------------------------------------------------------------------
 | author: @kreo
 | https://github.com/kreo
 |--------------------------------------------------------------------------
 */
html {
  min-height: 100%;
  position: relative;
}
html,
body {
  box-sizing: border-box;
  font-size: 100%;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}
*:focus {
  outline: 0;
}
body {
  cursor: auto;
  line-height: 1.42857143;
  margin: 0;
  padding: 0;
  position: relative;
  z-index: 0;
}
a {
  cursor: pointer;
  text-decoration: none;
  transition: all 0.1s ease-in;
}
a:hover {
  cursor: pointer;
  text-decoration: none;
}
a:hover,
a:active,
a:focus {
  outline: 0;
  text-decoration: none;
}
a:before,
a:after {
  transition: all 0.1s ease-in;
}
a img {
  border: 0;
}
img {
  -ms-interpolation-mode: bicubic;
  display: inline-block;
  height: auto;
  max-width: 100%;
  vertical-align: middle;
}
ul,
ol,
dl {
  margin: 0;
}
nav {
  list-style: none;
  margin-bottom: 0;
  padding-left: 0;
}
form {
  width: 100%;
}
/*# sourceMappingURL=data:application/json;base64, */